~testTone = {SinOsc.ar(Array.fill(13, {|i| (i + 60).midicps}), 0, 0.01)}.play;
// Hi
Array.fill(13, {|i| (i + 60).midicps})

~testTone.free;
////////////////////////////////////////////
////////////////////////////////////////////
(
fork {
	"./prep/01-tower.scd".loadRelative;
	
	~towers = [$C, $D, $E, $F, $H, $I, $J, $K, $M, $N, $O, $P, $Q].collect({arg i; ~tower.new(i, "../media/") });
	s.sync;
	"./prep/02-spacer.scd".loadRelative;
	~spacer = ~spacer.new(~towers);
	~spacer.route;
	~spacer.spread;
}
)

//////////////////////////
// Calibrate !!!!!!!!!! //
//////////////////////////
~towers.do(_.calibrate);
~towers.do(_.stopCalibration);

////////////////////////////////////////////
// STOP !!!!!!!!!!!!!!!!
////////////////////////////////////////////
(
~towers.do(_.free);
~spacer.do(_.free);
)

////////////////////////////////////////////
////////////////////////////////////////////

~towers[11].playAm;
~towers[11].stopAm;

~towers[11].calibrate;
~towers[11].stopCalibration;

~towers[11].rawBuses[0].get;


~towers[11].oscRaw.func.def.sourceCode;

~towers[11].oscRaw.func_({|msg| msg.postln;});

s.queryAllNodes

a = Synth.tail(s ,\towerAm);
s.meter